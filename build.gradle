buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    // QueryDSL
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'pie'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // S3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.518'
    testImplementation 'com.amazonaws:aws-java-sdk-s3:1.12.518'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}
jar {
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}

/** QueryDSL start **/
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
/** QueryDSL end **/

/** Submodule start **/
processResources.dependsOn('copySecret')

tasks.register('copySecret', Copy) {
    description = 'Copy submodules to project'

    from('./tomato-secret') {
        include('*.yml')
    }
    into('src/main/resources')
}
/** Submodule end **/

/**
 *  ./gradlew -x test clean build
 **/

